{"version":3,"sources":["index.js"],"names":["getWinner","squares","winConditions","i","length","x","y","z","ResetBoard","props","className","onClick","Square","style","fontSize","value","Board","defaultSquares","useState","setSquares","xToMove","setXToMove","drawSquare","newSquares","makeMove","message","winner","full","boardFull","ReactDOM","render","document","getElementById"],"mappings":"kOAKA,SAASA,EAAUC,GAYjB,IAXA,IAAMC,EAAgB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAI,EAAGA,EAAID,EAAcE,OAAQD,IAAK,CAAC,IAAD,cAC3BD,EAAcC,GADa,GACtCE,EADsC,KACnCC,EADmC,KAChCC,EADgC,KAE7C,GAAIN,EAAQI,IAAMJ,EAAQI,IAAMJ,EAAQK,IAAML,EAAQK,IAAML,EAAQM,GAClE,OAAON,EAAQI,GAGnB,OAAO,EAaT,SAASG,EAAWC,GAClB,OACE,4BAAQC,UAAU,sBAAsBC,QAAS,kBAAMF,EAAME,YAA7D,eAMJ,SAASC,EAAOH,GACd,OACE,4BACEC,UAAU,2BACVC,QAASF,EAAME,SAEf,0BAAME,MAAO,CAACC,SAAU,UAAWL,EAAMM,QAK/C,SAASC,EAAMP,GACb,IAAMQ,EAAiB,CAAE,KAAM,KAAM,KACZ,KAAM,KAAM,KACZ,KAAM,KAAM,MAHjB,EAKUC,mBAASD,GALnB,mBAKbhB,EALa,KAKJkB,EALI,OAMUD,oBAAS,GANnB,mBAMbE,EANa,KAMJC,EANI,KAuBpB,SAASC,EAAWnB,GAClB,OACE,kBAACS,EAAD,CACEG,MAAOd,EAAQE,GACfQ,QAAS,kBAnBf,SAAkBR,GAChB,IAAMoB,EAAU,YAAOtB,GACnBD,EAAUuB,IAAgC,MAAjBA,EAAWpB,KAGxCoB,EAAWpB,GAAKiB,EAAU,IAAM,IAChCD,EAAWI,GACXF,GAAYD,IAYOI,CAASrB,MAK9B,IAEIsB,EAFAC,EAAS1B,EAAUC,GACnB0B,EA9DN,SAAmB1B,GAEjB,IADA,IAAI0B,GAAO,EACFxB,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAChB,MAAdF,EAAQE,KACVwB,GAAO,GAGX,OAAOA,EAuDIC,CAAU3B,GAWrB,OAREwB,EADEC,EACQA,EAAS,SACVC,EACC,OAGCP,EAAU,IAAM,KAAO,WAIlC,yBAAKV,UAAU,WACb,yBAAKA,UAAU,WAAWe,GAC1B,6BACGH,EAAW,GACXA,EAAW,GACXA,EAAW,IAEd,6BACGA,EAAW,GACXA,EAAW,GACXA,EAAW,IAEd,6BACGA,EAAW,GACXA,EAAW,GACXA,EAAW,IAEd,kBAACd,EAAD,CAAYG,QA5ChB,WACEQ,EAAWF,GACXI,GAAW,OA+CfQ,IAASC,OACP,kBAACd,EAAD,MACAe,SAASC,eAAe,W","file":"static/js/main.392035fa.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nfunction getWinner(squares) {\r\n  const winConditions = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  \r\n  for (let i = 0; i < winConditions.length; i++) {\r\n    const [x, y, z] = winConditions[i];\r\n    if (squares[x] && squares[x] == squares[y] && squares[y] == squares[z]) {\r\n      return squares[x];\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction boardFull(squares) {\r\n  let full = true;\r\n  for (let i = 0; i < squares.length; i++) {\r\n    if (squares[i] == null) {\r\n      full = false;\r\n    }\r\n  }\r\n  return full;\r\n}\r\n\r\nfunction ResetBoard(props) {\r\n  return (\r\n    <button className=\"btn btn-danger mt-3\" onClick={() => props.onClick()}>\r\n      Reset Board\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button \r\n      className=\"square btn btn-secondary\" \r\n      onClick={props.onClick}\r\n    >\r\n      <span style={{fontSize: \"3vmin\"}}>{props.value}</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction Board(props) {\r\n  const defaultSquares = [ null, null, null, \r\n                           null, null, null, \r\n                           null, null, null, ];\r\n  \r\n  const [squares, setSquares] = useState(defaultSquares);\r\n  const [xToMove, setXToMove] = useState(true);\r\n  \r\n  function makeMove(i) {\r\n    const newSquares = [...squares];\r\n    if (getWinner(newSquares) || newSquares[i] != null) {\r\n      return;\r\n    }\r\n    newSquares[i] = xToMove ? \"X\" : \"O\";\r\n    setSquares(newSquares);\r\n    setXToMove(!xToMove);\r\n  }\r\n  \r\n  function reset() {\r\n    setSquares(defaultSquares);\r\n    setXToMove(true);\r\n  }\r\n  \r\n  function drawSquare(i) {\r\n    return (\r\n      <Square \r\n        value={squares[i]}\r\n        onClick={() => makeMove(i)}\r\n      />\r\n    );\r\n  }\r\n  \r\n  let winner = getWinner(squares);\r\n  let full = boardFull(squares);\r\n  let message;\r\n  if (winner) {\r\n    message = winner + ' WINS!';\r\n  } else if (full) {\r\n    message = 'TIE';  \r\n  }\r\n  else {\r\n    message = (xToMove ? 'X' : 'O') + ' TO MOVE';\r\n  }\r\n  \r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"message\">{message}</div>\r\n      <div>\r\n        {drawSquare(0)}\r\n        {drawSquare(1)}\r\n        {drawSquare(2)}\r\n      </div>\r\n      <div>\r\n        {drawSquare(3)}\r\n        {drawSquare(4)}\r\n        {drawSquare(5)}\r\n      </div>\r\n      <div>\r\n        {drawSquare(6)}\r\n        {drawSquare(7)}\r\n        {drawSquare(8)}\r\n      </div>\r\n      <ResetBoard onClick={reset}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  <Board />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}